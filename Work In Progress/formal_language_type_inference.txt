# Types

∀a.List a ::= Empty
            | Cons a (List a)

Nat       ::= 1 | Succ Nat

Int       ::= 0 | Pos Nat | Neg Nat

Bool      ::= True | False

# Domain

Let S be a set of symbols.

D ⊆ S × T

I : <lower_var> -> S is a function, interpretating a syntactical variable.
C : D -> <upper_var> -> T returns the constructor of a syntactical terminal.

# Type inference for expressions

I([[v]]):a
(a,t) ∈ Γ
-----------------------                                               [Variable]
Γ ⊢ [[v]]:t

I([[v]]):a
(v,t) ∈ Γ
-----------------------                                       [Type Constructor]
Γ ⊢ [[v]]:t

Γ1 ⊢ [[p]]:t1
Γ2 ∪ Γ1 ⊢ [[e]]:t2
Γ1 ∩ Γ2 = {}
----------------------------------------------------           [Lambda Function]
Γ1 ∪ Γ2 ⊢ [["\" p:<pattern> "->" e:<exp>]]:t1 -> t2

Γ ⊢ [[e1]]:t1
Γ ⊢ [[e2]]:t2
---------------------------------------------                            [Tuple]
Γ ⊢ [["(" e1:<exp> "," e2:<exp> ")"]]:(t1,t2)

⊢ [["[]"]]:∀a.a                                                     [Empty List]

Γ1 ⊢ [[e]]:t1
Γ2 ⊢ [["[" l "]"]]:t2
t1 ⊑ t   t2 ⊑ List t   Γ1 ∩ Γ2 = {}
---------------------------------------------------                       [List]
Γ1 ∪ Γ2 ⊢ [[" e:<exp> "," l:<list-exp> "]]: List t

⊢ [[<int>]]:Int                                                            [Int]

⊢ [[<bool>]]:Bool                                                         [Bool]

Γ ⊢ [[e1]]:t1 -> t3
Γ ⊢ [[e2]]:t2
--------------------------                                                [Call]
Γ ⊢ [[<exp> <exp>]]:t3

Γ1 ⊢ [[e1]]:t1
Γ2 ⊢ [[p]]:t1
Γ1 ∩ Γ2 = {}
Γ1 ∪ Γ2 ⊢ [[e2]]:t2
------------------------------------------------------------------------[CaseOf]
Γ1 ⊢ [["case" e1:<exp> "of" "[" p:<pattern> "->" e2:<exp> ";" <list-case> "]"]]:t2

Γ1 ⊢ [[v]]:t1
Γ2 ⊢ [[p]]:t2
Γ1 ∩ Γ2 = {}
t2 !⊑ t1
Γ1 ⊢ [[l]]:t3
-----------------------------------------------------------------------[CaseOf2]
Γ1 ⊢ [["case" v:<exp> "of" "[" p:<pattern> "->" e2:<exp> ";" l:<list-case> "]"]]:t3

I([[v]]):a
Γ ⊢ [[e]]:t1
Γ ∪ {a:t1} ⊢ [[e2]]:t2
------------------------------------------------------------------       [LetIn]
Γ ⊢ [["let" v:<lower-var> "=" e1:<exp> "in" e2:<exp>]]:t2

I([[t']]):t1
I([[v]]):a
Γ ⊢ [[e]]:t1
Γ ∪ {a:t1} ⊢ [[<e2>]]:t2
------------------------------------------------------------------------[LetIn2]
Γ ⊢ [["let" v:<lower_var> ":" t':<type> ";" v:<lower_var> "=" e1:<exp> "in" e2:<exp>]]:t

I(v):{l:t,..}
-----------------------------------------                               [Getter]
Γ ⊢ [[v:<lower_var> "." l:<lower_var>]]:t

I(v):t
----------------------------------------------------                    [Setter]
Γ ⊢ [["{" v:<lower_var> "|" <list_exp_field> "}"]]:t

⊢ [["{}"]]:{}                                                        [Empty Set]

k:\mathcal{N}_1^m->\mathcal{N}_1^n
k is injective
∀i\in\mathcal{N}_1^n.I(v_i)=l_(k(i)) ∧
Γ = ∪_{i\in\mathcal{N}_1^n} {(l_(k(i)),T_(k(i)))}
------------------------------------------------------------------------[Record]
Γ ⊢ [["{" v_1:<lower_var> ":" e_1:<exp> "," .. "," v_n:<lower_var> ":" e_n:<exp> "}"]]:{l_1:T_1,..,l_n:T_n}

Γ ⊢ [[e1]]:Bool
Γ ⊢ [[e2]]:T
Γ ⊢ [[e3]]:T
-------------------------------------------------------                 [IfElse]
Γ ⊢ [["if" e1:<exp> "then" e2:<exp> "else" e3:<exp>]]:T

Γ ⊢ [[e1]]:T_1->T_2
Γ ⊢ [[e2]]:T_2->T_3
-----------------------------------------                          [Conposition]
Γ ⊢ [[e1:<exp> ">>" e2:<exp>]]:T_1 -> T_2

Γ ⊢ [[e1]]:T_1
Γ ⊢ [[e1]]:T_1->T_2
----------------------------------                                        [Pipe]
Γ ⊢ [[e1:<exp> "|>" e2:<exp>]]:T_2

⊢ [["(||)"]]:Bool->Bool->Bool                                               [Or]

⊢ [["(&&)"]]:Bool->Bool->Bool                                              [And]

⊢ [["not"]]:Bool->Bool                                                     [Not]

⊢ [["(==)"]]:Int->Int->Bool                                              [Equal]

⊢ [["(<)"]]:Int->Int->Bool                                                [Less]

⊢ [["(//)"]]:Int->Int->Int                                              [Divide]

⊢ [["(*)"]]:Int->Int->Int                                             [Multiply]

⊢ [["(-)"]]:Int->Int->Int                                                [Minus]

⊢ [["(+)"]]:Int->Int->Int                                                 [Plus]

⊢ [["(::)"]]:∀a.a->List a->List a                                         [Cons]

⊢ [["foldl"]]:∀a ∀b.(a->b)->b->List a->b                                 [Foldl]